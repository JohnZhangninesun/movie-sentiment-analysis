# -*- coding: utf-8 -*-
"""Sentiment analysis of movies (IMDB).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VG2HK10WNFWz_hJlvaL1IvYNEC8sJox9
"""

neg_labels = np.array(SAMPLE_SIZE * [[0,1]])
neg_labels



"""http://ai.stanford.edu/~amaas/data/sentiment/"""

!pip install nltk
!pip install --upgrade gensim

import numpy as np
import os
import os.path

from nltk.tokenize import word_tokenize
nltk.download('punkt')

if not os.path.isfile('aclImdb_v1.tar.gz'):
  !wget http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz 

if not os.path.isfile('aclImdb'):  
  !tar -xf aclImdb_v1.tar.gz

!tail aclImdb/imdb.vocab

import glob

SAMPLE_SIZE=600
positive_sample_file_list = glob.glob(os.path.join('aclImdb/train/pos', "*.txt"))
positive_sample_file_list = positive_sample_file_list[:SAMPLE_SIZE]

negative_sample_file_list = glob.glob(os.path.join('aclImdb/train/neg', "*.txt"))
negative_sample_file_list = negative_sample_file_list[:SAMPLE_SIZE]


# load doc into memory
def load_doc(filename):
	# open the file as read only
	file = open(filename, 'r')
	# read all text
	text = file.read()
	# close the file
	file.close()
	return text

pos_strings = [load_doc(x) for x in positive_sample_file_list]
print(pos_strings[:10])

neg_strings = [load_doc(x) for x in negative_sample_file_list]
print(neg_strings[:10])

pos_labels = np.array(SAMPLE_SIZE * [[1,0]])
pos_labels

pos_tokenized = [word_tokenize(s) for s in pos_strings]
print(pos_tokenized[1])
print(pos_tokenized[2])

neg_tokenized = [word_tokenize(s) for s in neg_strings]
print(neg_tokenized[1])
print(neg_tokenized[2])

# load doc into memory
with open('aclImdb/imdb.vocab') as f:
  content = f.readlines()
universe_vocabulary = [x.strip() for x in content]

print(len(universe_vocabulary))
print(len(set(universe_vocabulary)))

from gensim.models import Word2Vec
model_ted = Word2Vec(sentences=pos_tokenized, size=100, window=5, min_count=5, workers=1, sg=0, seed=42)
model_ted.wv.most_similar("brother")

print(np.linalg.norm(model_ted.wv['man'] - model_ted.wv['woman']))
print(np.linalg.norm(model_ted.wv['father'] - model_ted.wv['mother']))
print(np.linalg.norm(model_ted.wv['brother'] - model_ted.wv['sister']))
print(np.linalg.norm(model_ted.wv['house'] - model_ted.wv['ship']))

print(np.linalg.norm(model_ted.wv['father'] - model_ted.wv['mother']))
print(np.linalg.norm(model_ted.wv['sister'] - model_ted.wv['mother']))

